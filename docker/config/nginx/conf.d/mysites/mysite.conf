error_log /dev/stdout info;

events {
  worker_connections  4096;  # Default: 1024
}

http {
    ##clien
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # set client body size to 5M #
    client_max_body_size 5M;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Logging Settings
    ##

    # access_log /var/log/nginx/access.log;
    # error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable "msie6";

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # problem: when 'api' container restarts it gets a new ip, but nginx caches this name 'api'
    # fix: force a short valid time on the resolver
    # fix from https://serverfault.com/questions/722438/nginx-refresh-upstream-server-ip
    # 127.0.0.11 comes from /etc/resolv.conf on the nginx container
    # Note: This fix does not seem to be working
    # alternative fix from https://stackoverflow.com/questions/62703337/reverse-proxy-with-keepalive-and-re-resolve-dns-according-to-ttl-in-nginx
    # don't use upstream {}
    # but rather use a variable  (see location)
    # set $app_server api;
    resolver 127.0.0.11 valid=3s;

    # use a map, (not if !!)
    map $http_origin $allow_origin {
      default "";
      "~^https?://www\.vandiest\.it$" "$http_origin";
      "~^https?:/api\.vandiest\.it$" "$http_origin";
      "~^https?://vandiest\.it$" "$http_origin";
      # example for 8001, not really used, just an example
      "~^https?://(localhost:8001|localhost:8080|localhost:8000)$" "$http_origin";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }


    server {
        listen 80;
        charset utf-8;
        root /usr/share/nginx/html;
        index index.html;
        server_name api.* acc.api.* test.api.* dev.api.*;

        location / {
            # For CORS support
            if ($request_method = 'OPTIONS') {
	            # tricky, adds the CORS headers (below) too
	            return 204;
	        }

            set $app_server api;
            proxy_pass http://$app_server:8001;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        }

        location /static/ {
            alias /usr/share/nginx/html/htdocs/static/;
            expires 1y;
            add_header Cache-Control "public";
        }

        location /media/ {
            alias /usr/share/nginx/html/htdocs/media/;
            expires 1y;
            add_header Cache-Control "public";
        }

        location /ws/ {
          set $ws_server api;
          proxy_pass http://$ws_server:8001;
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host $http_host;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
        }

        # Add the exact host, using a whitelist, implemented here via a map
        add_header Access-Control-Allow-Origin $allow_origin always;
        # we post our login as json, so we need this header
        add_header Access-Control-Allow-Headers 'Content-Type,X-Username' always;
        # required to allow withCredentials in axios
        add_header Access-Control-Allow-Credentials true always;
        # required for DELETE
        add_header Access-Control-Allow-Methods 'GET, POST, DELETE, HEAD, PATCH' always;
    }

    server {
        listen 80 default_server;
        charset utf-8;
        root /usr/share/nginx/html;
        index index.html;
        server_name _;   # default_server

        location / {
          set $frontend_server frontend;
          proxy_pass http://$frontend_server:80;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
        }
    }
}

